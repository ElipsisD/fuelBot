"""–†–∞–±–æ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¢–û (–ø–∞—Ä—Å–∏–Ω–≥, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π)"""
import re
from datetime import datetime

from utils import db, exceptions


def make_maintenance_info(user_id: str, car: str) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –¢–û –∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –¢–û –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    try:
        last_maintenance = db.get_last_maintenance(user_id, car)
        if service_interval := db.get_service_interval(user_id):
            next_maintenance = last_maintenance.odo + service_interval
            last_odo = db.get_last_odo_on_car(user_id, car)
            until_next_maintenance = next_maintenance - last_odo
            if until_next_maintenance < 0:
                until_next_maintenance = f'–¢–û –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ <b>{abs(until_next_maintenance)} –∫–º</b>'
            else:
                until_next_maintenance = f'–°–ª–µ–¥—É—é—â–µ–µ –¢–û —á–µ—Ä–µ–∑ <b>{until_next_maintenance} –∫–º</b>'
        else:
            service_interval = until_next_maintenance = 'NOT FOUND'
        return f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¢–û:\n\n' \
               f'üöó  <b>{car}</b>\n\n' \
               f'üìÖ  {datetime.fromisoformat(last_maintenance.date).strftime("%d.%m.%Y")}\n\n' \
               f'üìü  {last_maintenance.odo} –∫–º\n\n' \
               f'{until_next_maintenance}\n\n' \
               f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª {service_interval} –∫–º'
    except exceptions.NotFoundMaintenance as e:
        return str(e)


def parse_maintenance_date(text: str) -> str:
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –¢–û"""
    regexp_result = re.fullmatch(r"\W*(\d{2})\W+(\d{2})\W+(\d{2})\W*", text)
    if not regexp_result or int(regexp_result.group(1)) > 31 or int(regexp_result.group(2)) > 12:
        raise exceptions.NotCorrectData("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<b>–î–î.–ú–ú.–ì–ì</b>")
    return f'20{regexp_result.group(3)}-{regexp_result.group(2)}-{regexp_result.group(1)}'


def parse_maintenance_number(text: str) -> int:
    """–ü–∞—Ä—Å–∏—Ç —á–∏—Å–ª–∞: –ø—Ä–æ–±–µ–≥ –¢–û, –∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¢–û"""
    regexp_result = re.fullmatch(r"\W*(\d+)\W*", text)
    if not regexp_result:
        raise exceptions.NotCorrectNumber("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    return int(regexp_result.group(1))
