"""–†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–ø—Ä–∞–≤–∫–µ"""
import re
from datetime import datetime

from aiogram import types

from . import db
from . import exceptions
from .graphs_settings import make_graph_stat


def add_refueling(message: types.Message, ref_mode: str, selected_car: str = None) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø—Ä–∞–≤–∫–∏ –≤ –ë–î"""
    user_id = str(message.from_user.id)
    if ref_mode == 'full':
        odo, filing_volume = _parse_message(message.text)
        if last_ref := db.get_last_odo_on_car(user_id, selected_car):  # else –ø–µ—Ä–≤–∞—è –∑–∞–ø—Ä–∞–≤–∫–∞ –Ω–∞ —ç—Ç–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            if last_ref > odo:
                raise exceptions.NotCorrectRefueling(
                    f'–ü—Ä–æ–±–µ–≥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–∞ –Ω–µ —É–≤–µ–ª–∏—á–∏–ª—Å—è!\n'
                    f'–í –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ –±—ã–ª–æ {last_ref} –∫–º\n'
                    f'–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑'
                )
    else:
        odo, filing_volume = 0, float(message.text.replace(',', '.').strip())
    db.new_refueling(user_id, selected_car, odo, filing_volume)


def _parse_message(raw_message: str) -> tuple:
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø—Ä–∞–≤–∫–µ"""
    regexp_result = re.fullmatch(r"([\d.,]+)\s+(\d+)", raw_message)
    if not regexp_result or not regexp_result.group(0) \
            or not regexp_result.group(1) or not regexp_result.group(2):
        raise exceptions.NotCorrectRefueling(
            "–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:"
            "\n23,54 68900"
        )
    filing_volume = float(regexp_result.group(1).replace(',', '.'))
    odo = int(regexp_result.group(2))
    return odo, filing_volume


def last_fuel_expense(user_id: str, car: str) -> str:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –ø–æ–ª–Ω—ã–º–∏ –∑–∞–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if refs := db.get_two_last_full_ref_on_car(user_id, car):
        distance = refs[0]['odo'] - refs[-1]['odo']  # –ü—Ä–æ–π–¥–µ–Ω–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
        spent_fuel = sum(i['filing_volume'] for i in refs[:-1])
        expense = round(spent_fuel / distance * 100, 2)  # –†–∞—Å—Ö–æ–¥
        return f'üöó  {car}\n\n' \
               f'üìÖ  {datetime.fromisoformat(refs[0]["date"]).strftime("%d.%m.%Y %H:%M")}\n\n' \
               f'üìä  <b>{expense}</b> –ª / 100 –∫–º'
    else:
        raise exceptions.NotEnoughRefuelings(
            '–î–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è –¥–æ –ø–æ–ª–Ω–æ–≥–æ –±–∞–∫–∞ –º–∏–Ω–∏–º—É–º 2 —Ä–∞–∑–∞ üóø')


def volume_since_last_full_fill(user_id: str, car: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤, –∑–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ª–Ω–æ–π –∑–∞–ø—Ä–∞–≤–∫–∏"""
    refs = db.get_last_partial_ref_on_car(user_id, car)
    volume = round(sum(ref['filing_volume'] for ref in refs))
    return f'üöó  {car}\n\n' \
           f'üìÖ  {datetime.fromisoformat(refs[0]["date"]).strftime("%d.%m.%Y %H:%M")}\n\n' \
           f'‚õΩ  –ó–∞–ø—Ä–∞–≤–∏–ª —É–∂–µ {volume} –ª'


def graph_stat(user_id: str, car: str) -> types.InputFile:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç InputPhoto"""
    if photo := db.user_graph_check(user_id, car):
        return photo
    else:
        return update_graph_stat(user_id, car)


def update_graph_stat(user_id: str, car: str) -> types.InputFile:
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç InputPhoto"""
    expenses = _get_data_for_graph(user_id, car)
    return make_graph_stat(user_id, car, expenses)


def _get_data_for_graph(user_id: str, car: str) -> tuple:
    data_iter = iter(db.get_refuelings_list(user_id, car))
    expenses = ([], [])
    prev_odo = 0
    for ref in data_iter:
        if ref.odo != 0:
            prev_odo = ref.odo
            break
    volume_counter = 0
    for ref in data_iter:
        volume_counter += ref.filing_volume
        if ref.odo != 0:
            expense = round(volume_counter / (ref.odo - prev_odo) * 100, 2)
            expenses[0].append(expense)
            expenses[1].append(datetime.fromisoformat(ref.date))
            prev_odo = ref.odo
            volume_counter = 0
    if expenses[0]:
        return expenses
    else:
        raise exceptions.NotEnoughRefuelings(
            '–î–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è –¥–æ –ø–æ–ª–Ω–æ–≥–æ –±–∞–∫–∞ –º–∏–Ω–∏–º—É–º 2 —Ä–∞–∑–∞ üóø')


