"""–†–∞–±–æ—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
import logging

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from keyboards.cars_key import actions_with_cars, actions_menu, actions_cars_key
from keyboards.menu_bot import menu, menu_cd, back_key
from keyboards.ref_key import refueling_mode, cars_key
from misc.states import FSMNewRefueling, FSMActions
from utils import db, strtime, exceptions, refuelings
from utils.exceptions import NotCorrectCarName


async def send_welcome(m: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
    await m.answer(f"–ü—Ä–∏–≤–µ—Ç, {m.from_user.first_name}!\n\n"
                   f"–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤–µ–¥–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞ —Ç–≤–æ–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
                   f"–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –¥–æ –ø–æ–ª–Ω–æ–≥–æ –±–∞–∫–∞\n",
                   reply_markup=menu)
    await m.delete()


"""–ú–µ–Ω—é –±–æ—Ç–∞"""


async def menu_cmd(call: types.CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ù–ê–ó–ê–î"""
    await state.finish()
    await call.message.edit_text(f"{call.from_user.first_name}, –≤—ã–±–∏—Ä–∞–π! üòÖ")
    await call.message.edit_reply_markup(reply_markup=menu)


"""–†–∞–±–æ—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–π –∑–∞–ø—Ä–∞–≤–∫–µ"""


async def new_cmd(call: types.CallbackQuery):
    logging.info(f'{call.from_user.id=} {call.from_user.username=} {strtime.get_now_formatted()}')
    cars_list = db.user_cars(str(call.from_user.id))

    if len(cars_list) > 1:
        await call.message.edit_text("–ö–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∑–∞–ø—Ä–∞–≤–ª—è–µ–º?")
        await call.message.edit_reply_markup(reply_markup=cars_key(cars_list))

    else:
        await call.message.edit_text("–ö–∞–∫ –∑–∞–ø—Ä–∞–≤–ª—è–µ–º?")
        await call.message.edit_reply_markup(reply_markup=refueling_mode(cars_list[0]))


async def choice_of_refueling_mode(call: types.CallbackQuery, callback_data: dict):
    car = callback_data.get('car')
    await call.message.edit_text(f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car}\n\n"
                                 "–ö–∞–∫ –∑–∞–ø—Ä–∞–≤–ª—è–µ–º?")
    await call.message.edit_reply_markup(reply_markup=refueling_mode(car))


async def data_input(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await FSMNewRefueling.data.set()
    async with state.proxy() as context_data:
        context_data.update(callback_data)
        context_data['message'] = call.message
    answer = "–í–Ω–µ—Å–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" + \
             ("–æ–±—ä–µ–º_–∑–∞–ø—Ä–∞–≤–∫–∏_–≤_–ª–∏—Ç—Ä–∞—Ö –æ–±—â–∏–π_–ø—Ä–æ–±–µ–≥\n–ü—Ä–∏–º–µ—Ä:\n48,21 125485"
              if callback_data['mode'] == 'full'
              else "–æ–±—ä–µ–º_–∑–∞–ø—Ä–∞–≤–∫–∏_–≤_–ª–∏—Ç—Ä–∞—Ö\n–ü—Ä–∏–º–µ—Ä:\n48,21")

    await call.message.edit_text(answer)
    await call.message.edit_reply_markup(reply_markup=back_key)


async def data_handler(m: types.Message, state: FSMContext):
    async with state.proxy() as context_data:
        car = context_data['car']
        prev_m = context_data['message']
        ref_mode = context_data['mode']
    try:
        refuelings.add_refueling(m, ref_mode=ref_mode, selected_car=car)
        answer = refuelings.last_fuel_expense(str(m.from_user.id), car=car)
        answer = answer if ref_mode == 'full' else ''
        await prev_m.edit_text('–£—Å–ø–µ—à–Ω–æ\n'
                               f'–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car}\n'
                               + answer)  # TODO –ï—Å–ª–∏ –∑–∞–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è, —Ç–æ –Ω–µ –Ω–∞–¥–æ –≤—ã–≤–æ–¥–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
        await prev_m.edit_reply_markup(reply_markup=menu)
        await m.delete()
        await state.finish()
    except exceptions.NotCorrectRefueling as e:
        await m.delete()
        await prev_m.edit_text(str(e))
        await prev_m.edit_reply_markup(reply_markup=back_key)


"""–†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–¥–µ–ª–æ–º –ú–û–ò –ê–í–¢–û–ú–û–ë–ò–õ–ò"""


async def menu_cars_cmd(call: types.CallbackQuery):
    cars = db.user_cars(str(call.from_user.id))
    if len(cars) == 1:
        await call.message.edit_text(cars[0])
    else:
        await call.message.edit_text('\n'.join(cars))
    await call.message.edit_reply_markup(reply_markup=actions_with_cars)


async def adding_car(call: types.CallbackQuery, state: FSMContext):
    await FSMActions.new_car_name.set()
    async with state.proxy() as context_data:
        context_data['prev_m'] = call.message
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è')
    await call.message.edit_reply_markup(reply_markup=back_key)


async def new_car_handler(m: types.Message, state: FSMContext):
    async with state.proxy() as context_data:
        prev_m = context_data['prev_m']
    try:
        db.add_new_car(str(m.from_user.id), m.text)
        await prev_m.edit_text('–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å!\n\n'+m.text)
        await prev_m.edit_reply_markup(reply_markup=menu)
        await m.delete()
        await state.finish()
    except NotCorrectCarName as e:
        await m.delete()
        await prev_m.edit_text(str(e))
        await prev_m.edit_reply_markup(reply_markup=back_key)


async def deleting_car(call: types.CallbackQuery):
    cars_list = db.user_cars(str(call.from_user.id))
    await call.message.edit_text('–ö–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–æ—Ç–∞?')
    await call.message.edit_reply_markup(reply_markup=actions_cars_key(cars_list))


async def choice_car_to_delete(call: types.CallbackQuery, callback_data: dict):
    db.delete_car(str(call.from_user.id), callback_data.get('car'))
    await call.message.edit_text(f'–ê–≤—Ç–æ–º–æ–±–∏–ª—å {callback_data.get("car")} —É–¥–∞–ª–µ–Ω!')
    await call.message.edit_reply_markup(reply_markup=menu)


"""–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""


async def delete_unnecessary_message(m: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await m.delete()


def register_user(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    """–°—Ç–∞—Ä—Ç"""
    dp.register_message_handler(send_welcome, commands=['start', 'help'])
    """–ú–µ–Ω—é"""
    dp.register_callback_query_handler(menu_cmd, text='menu', state='*')
    """–ù–æ–≤–∞—è –∑–∞–ø—Ä–∞–≤–∫–∞"""
    dp.register_callback_query_handler(new_cmd, text='new ref')
    dp.register_callback_query_handler(choice_of_refueling_mode, menu_cd.filter(level='2'))
    dp.register_callback_query_handler(data_input, menu_cd.filter(level='3'))
    dp.register_message_handler(data_handler, state=FSMNewRefueling.data)
    """–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏"""
    dp.register_callback_query_handler(menu_cars_cmd, text='action menu cars')
    dp.register_callback_query_handler(adding_car, actions_menu.filter(mode='add car'))
    dp.register_message_handler(new_car_handler, state=FSMActions.new_car_name)
    dp.register_callback_query_handler(deleting_car, actions_menu.filter(mode='delete car'))
    dp.register_callback_query_handler(choice_car_to_delete, actions_menu.filter(mode='choice'))
    """–û–±—â–∏–π"""
    dp.register_message_handler(delete_unnecessary_message, state='*')
